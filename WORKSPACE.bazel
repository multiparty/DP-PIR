workspace(name = "drivacy")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

# Checklist (using our bazel-fork)
git_repository(
    name = "checklist",
    branch = "master",
    remote = "https://github.com/KinanBab/checklist.git",
)

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "69de5c704a05ff37862f7e0f5534d4f479418afc21806c887db544a316f3cb6b",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.27.0/rules_go-v0.27.0.tar.gz",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "62ca106be173579c0a167deb23358fdfe71ffa1e4cfdddf5582af26520f1c66f",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.23.0/bazel-gazelle-v0.23.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.23.0/bazel-gazelle-v0.23.0.tar.gz",
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("@checklist//:repositories.bzl", "go_repositories")

go_repositories()

go_rules_dependencies()

go_register_toolchains(version = "1.16")

gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

# Protobuf dependencies
http_archive(
    name = "rules_cc",
    sha256 = "35f2fb4ea0b3e61ad64a369de284e4fbbdcdba71836a5555abb5e194cf119509",
    strip_prefix = "rules_cc-624b5d59dfb45672d4239422fa1e3de1822ee110",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_cc/archive/624b5d59dfb45672d4239422fa1e3de1822ee110.tar.gz",
        "https://github.com/bazelbuild/rules_cc/archive/624b5d59dfb45672d4239422fa1e3de1822ee110.tar.gz",
    ],
)

http_archive(
    name = "rules_proto",
    sha256 = "2490dca4f249b8a9a3ab07bd1ba6eca085aaf8e45a734af92aad0c42d9dc7aaf",
    strip_prefix = "rules_proto-218ffa7dfa5408492dc86c01ee637614f8695c45",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/218ffa7dfa5408492dc86c01ee637614f8695c45.tar.gz",
        "https://github.com/bazelbuild/rules_proto/archive/218ffa7dfa5408492dc86c01ee637614f8695c45.tar.gz",
    ],
)

load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies")

rules_cc_dependencies()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

# Abseil
http_archive(
    name = "com_google_absl",
    sha256 = "f342aac71a62861ac784cadb8127d5a42c6c61ab1cd07f00aef05f2cc4988c42",
    strip_prefix = "abseil-cpp-20200225.2",
    urls = ["https://github.com/abseil/abseil-cpp/archive/20200225.2.zip"],
)

# Foreign rules to use for libsodium
http_archive(
    name = "rules_foreign_cc",
    sha256 = "c2cdcf55ffaf49366725639e45dedd449b8c3fe22b54e31625eb80ce3a240f1e",
    strip_prefix = "rules_foreign_cc-0.1.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.1.0.zip",
)

load("@rules_foreign_cc//:workspace_definitions.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

# Grab libsodium
all_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])"""

http_archive(
    name = "libsodium",
    build_file_content = all_content,
    strip_prefix = "libsodium-1.0.18-RELEASE",
    type = "zip",
    url = "https://github.com/jedisct1/libsodium/archive/1.0.18-RELEASE.zip",
)

# Grab uSockets and uWebSockets
new_git_repository(
    name = "uSockets",
    build_file_content = all_content,
    commit = "716c51be4447196d6818b212189bcf31698179c4",
    remote = "https://github.com/uNetworking/uSockets.git",
)

new_git_repository(
    name = "uWebSockets",
    build_file_content = all_content,
    commit = "f666aab105bd5c41d3a51d48b4949b2bbcdc2a21",
    remote = "https://github.com/uNetworking/uWebSockets.git",
)

# Seal and Seal PIR
new_git_repository(
    name = "Seal",
    branch = "3.2.0",
    build_file_content = all_content,
    remote = "https://github.com/microsoft/SEAL.git",
)

new_git_repository(
    name = "SealPIR",
    build_file_content = """
load("@rules_foreign_cc//tools/build_defs:cmake.bzl", "cmake_external")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_binary")

cmake_external(
    name = "seal",
    lib_source = "@Seal//:all",
    working_directory = "native/src/",
    static_libraries = ["libseal.a"],
)

genrule(
    name = "no_cout_sources",
    srcs = [
        "pir.cpp",
        "pir_client.cpp",
        "pir_server.cpp",
    ],
    outs = [
        "pir_opt.cpp",
        "pir_client_opt.cpp",
        "pir_server_opt.cpp",
    ],
    cmd_bash = '''
        sed 's/cout <</\/\/cout <</g' $(location pir.cpp) > $(location pir_opt.cpp)
        sed 's/cout <</\/\/cout <</g' $(location pir_client.cpp) > $(location pir_client_opt.cpp)
        sed 's/cout <</\/\/cout <</g' $(location pir_server.cpp) > $(location pir_server_opt.cpp)
    ''',
)

cc_library(
    name = "sealpir",
    srcs = [
        ":no_cout_sources",
    ],
    hdrs = [
        "pir.hpp",
        "pir_client.hpp",
        "pir_server.hpp",
    ],
    deps = [
        ":seal",
    ],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "main",
    srcs = [
        "main.cpp",
    ],
    deps = [
        ":sealpir",
    ],
    visibility = ["//visibility:public"],
) 
""",
    commit = "ccf86c50fd3291d7d720f1b9547022ebf3c9b6b0",
    remote = "https://github.com/microsoft/SealPIR.git",
)
